{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Riya's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p> <p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"tutorials/go-setup/","title":"Setting up a dev container for Go","text":"<ul> <li> <p>Primary author: Riya</p> </li> <li> <p>Reviewer: Shwetha</p> </li> </ul>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<ol> <li>Have Visual Studio Code installed.</li> <li>Install the Dev Containers extension for VS Code.</li> <li>Have docker running. </li> <li>Have git installed. </li> </ol>"},{"location":"tutorials/go-setup/#git-initialization","title":"Git initialization","text":"<ol> <li>Create a project folder <pre><code>mkdir HelloGo\ncd HelloGo\n</code></pre></li> <li>Initialize Git <pre><code>git init\n</code></pre></li> </ol>"},{"location":"tutorials/go-setup/#creating-a-new-dev-container-project-for-go","title":"Creating a new Dev Container Project for Go","text":"<ol> <li>Create a .devcontainer directory</li> <li>Create a Dev container configuration .devcontainer/devcontainer.json</li> </ol> <p>Here's the configuration for devcontainer.json file: <pre><code>{ \n    \"name\": \"Go Dev Container\",\n    \"image\": \"mcr.microsoft.com/devcontainers/go:0-1.19\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\"golang.go\"]\n        }\n    },\n    \"features\": {\n        \"ghcr.io/devcontainers/features/common-utils:2\": {}\n    }\n}\n</code></pre> This installs the official Go VSCode Plugin.</p> <ol> <li>Open the dev container in VSCode </li> <li>Press Ctrl+Shift+P and select Remote-Containers: Reopen in Container</li> </ol> <p>Note</p> <p>Ensure Docker is running before trying to reopen</p> <p>Verify the recent version of Go using: <pre><code>go version\n</code></pre></p>"},{"location":"tutorials/go-setup/#basic-hello-comp423-program","title":"Basic \"Hello COMP423\" Program","text":"<ol> <li> <p>Create a Go program by creating main.go <pre><code>package main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"Hello COMP423\")\n}\n</code></pre></p> </li> <li> <p>Initialize the Go module system <pre><code>go mod init HelloGo\n</code></pre></p> </li> <li> <p>Run the program <pre><code>go run main.go\n</code></pre></p> <p>This compiles and executes the main package in one step and is best used for quick testing. It doesn't create an executable file.</p> </li> <li> <p>Build a binary <pre><code>go build -o hello\n./hello\n</code></pre></p> <p>This compiles the program into a binary executable. It is similar to the gcc subcommand which creates the a.out file. While we use the gcc subcommand for C programs, we use the build for go.</p> </li> </ol>"}]}